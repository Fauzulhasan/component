#include<bits/stdc++.h>
using namespace std;
int parent[100];
int cost[100];
int color[100];
int n,e;
#define WHITE 0
#define GRAY 1
#define BLACK 2
vector<int>adj[100];
stack<int>st;
void dfsVisit(int x)
{
    color[x]=GRAY;
    for(int i=0; i<adj[x].size(); i++)
    {
        int u=adj[x][i];
        if(color[u]==WHITE)
        {
            parent[u]=x;
            dfsVisit(u);
        }
    }
    color[x]=BLACK;
    st.push(x);

}
void dfs()
{
    for(int i=1; i<=n; i++)
    {
        if(color[i]==WHITE)
        {
            dfsVisit(i);
        }
    }
}
int main()
{

    int x,y;
    cout<"Enter the node and edges:";
    cin>>n>>e;
    for(int i=0; i<e; i++)
    {
        cin>>x>>y;
        adj[x].push_back(y);
    }
    dfs();
    while(!st.empty())
    {
        cout<<st.top()<<" "<<endl;
        st.pop();
    }
    return 0;
}
================================================================================================
#include<bits/stdc++.h>
using namespace std;
int node,edge;
int clr[100];
#define white 1
#define black 2
#define gray 3
stack<int>s;

void firstBfsVisit(vector<int>graph[],int x)
{
    clr[x] = gray;

    for(int  i = 0; i<graph[x].size(); i++)
    {
        int v = graph[x][i];
        if(clr[v]==white)
        {
            firstBfsVisit(graph,v);
        }
    }
    clr[x] = black;
    s.push(x);
}
void firstBfs(vector<int>graph[])
{
    for(int i = 1; i<=node; i++)
        clr[i] = white;
    for(int i = 1 ; i<=node; i++)
    {
        if(clr[i]==white)
            firstBfsVisit(graph,i);
    }
}
void strong(vector<int>transposeGraph[],int x)
{
    clr[x] = gray;
    cout<<x<<" ";
    for(int i = 0; i<transposeGraph[x].size(); i++)
    {
        int v = transposeGraph[x][i];
        if(clr[v]==white)
        {
            strong(transposeGraph,v);
        }
    }
    clr[x] = black;

}
void stronglyConnectedComponent(vector<int>transposeGraph[])
{
    for(int i = 1; i<=node; i++)
        clr[i] = white;
    while(!s.empty())
    {
        int p = s.top();
        s.pop();
        if(clr[p]==white)
        {
            strong(transposeGraph,p);
            cout<<endl;
        }
    }
}
int main()
{
    cin>>node>>edge;
    vector<int>graph[node+4];
    vector<int>transposeGraph[node+4];
    for(int i = 0; i<edge; i++)
    {
        int n1,n2;
        cin>>n1>>n2;
        graph[n1].push_back(n2);
        transposeGraph[n2].push_back(n1);
    }
    firstBfs(graph);
    stronglyConnectedComponent(transposeGraph);

    return 0;
}